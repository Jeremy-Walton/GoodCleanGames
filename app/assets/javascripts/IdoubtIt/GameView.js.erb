var gameView = ['$scope', '$timeout', function($scope, $timeout) {
  if($(".Idoubtit")[0]) {
    $scope.get_player_name = function() {
      var email;
      var id = $('#UserId').data('id');
      $.ajax({
        url: '/users/' + id,
        async: false,
        success: function(data) {
          email = data.email
        }
      });
      return email.split('@')[0]
    }

    var gameID = document.URL.split('i_doubt_it/')[1];

    $scope.updateDatabase = function() {
      jsongame = JSON.stringify($scope.game)
      $.ajax({
        url: '/i_doubt_it/' + gameID,
        async: false,
        data: {game_type: "I Doubt It", id: parseInt(gameID), data: jsongame},
        method: "patch"
      });
    }

    $scope.startupGame = function() {
      $.ajax({
          url: '/games/lookup',
          data: {game_type: "I Doubt It", id: parseInt(gameID)},
          async: false,
          success: function(data) {
            if (data.game.data == '') {
              if ($scope.get_player_name() == data.game.name.split('@')[0]) {
                // fill data into database
                $scope.game = new Game();
                var name = $scope.get_player_name();
                $scope.game.addPlayer(name, false);
                console.log(data.users);
                for (var i = 0; i < data.game.number_of_players; i++) {
                  if ($scope.get_player_name() != data.users[i].email.split('@')[0]) {
                    $scope.game.addPlayer(data.users[i].email.split('@')[0], false);
                  }
                }
                $scope.game.setup();
                $scope.cards = $scope.game.playerPosition($scope.get_player_name()).hand.cards;
                // update database
                $scope.updateDatabase();
                // send push notifier
                //  ...
              }
            } else {
              $.ajax({
                url: '/games/lookup',
                data: {game_type: "I Doubt It", id: parseInt(gameID), just_game: 'true'},
                async: false,
                success: function(data) {
                  console.log(data);
                  gameData = Object.toObject(data);
                  $scope.game = gameData;
                  console.log($scope.game.playerPosition($scope.get_player_name()));
                  $scope.cards = $scope.game.playerPosition($scope.get_player_name()).hand.cards;
                  $scope.game.turnOrder = $scope.game.players;
                }
              });
            }
          }
        });
    }

    $scope.startupGame();

    var randomNames = ['Bill', 'Sam', 'Joe', 'John', 'Jack', 'Jill', 'Jane', 'Chris', 'Frank', 'Fred', 'Aaron', 'Caleb', 'Kyle', 'Brandon'];
    $scope.loopCount = 1;
    $scope.result = "Take your turn!";

    $scope.increment_stats = function(stat) {
      $.ajax({
        url: '/stats/show',
        data: {game_type: "I Doubt It", increment: stat}
      });
    }

    $scope.increment_stats("times_played");

    $scope.newGame = function() {
      var input = prompt("How many robots would you like to play against?");
      if (input > 0 && input < 6) {
        $scope.game = new Game();
        var name = $scope.get_player_name();
        $scope.game.addPlayer(name);
        for(var j, x, i = randomNames.length; i; j = Math.floor(Math.random() * i), x = randomNames[--i], randomNames[i] = randomNames[j], randomNames[j] = x);
        for (var i = 0; i < input; i++) {
          $scope.game.addPlayer(randomNames[i], true);
        }
        $scope.loopCount = 1;
        $scope.game.setup();
        $scope.result = "Take your turn!";
        $scope.cards = $scope.game.playerPosition(name).hand.cards;
        $scope.increment_stats("times_played");
      }
    }

    $scope.saveGame = function() {
      // broken method
      if (input = prompt("What name would you like to save it under")) {
        jsongame = JSON.stringify($scope.game)
        $.ajax({
          url: '/games',
          data: {game_type: "I Doubt It", name: input, data: jsongame},
          data_type: "application/json",
          method: "post"
        });
      }
    }

    // $scope.cards = $scope.game.playerPosition($scope.get_player_name()).hand.cards;
    $scope.unselectedCards = function (cards) {
      return cards.filter(function (card) {
        return !card.selected;
      });
    }
    $scope.selectedCards = function (cards) {
      return cards.filter(function (card) {
        return card.selected;
      });
    }

    $scope.info = function() {
      return $scope.game.players;
    }

    $scope.loadGame = function() {
      // broken method
      if (input = prompt("What game would you like to load?")) {
        $.ajax({
          url: '/games/lookup',
          data: {game_type: "I Doubt It", name: input},
          success: function(data) {
            gameData = Object.toObject(data);
            $scope.game = gameData;
            $scope.cards = $scope.game.players[0].hand.cards;
            $scope.game.players[0].name = $scope.get_player_name();
            $scope.game.turnOrder = $scope.game.players;
            $scope.$apply();
          }
        });
      }
    }

    $scope.playerNames = function() {
      var playerNames = "";
      for (var i = 0; i < $scope.game.players.length; i++) {
        playerNames += " | " + $scope.game.players[i].name + " | ";
      }
      return playerNames;
    }

    $scope.discardPile = function() {
      if ($scope.game.discardPile.size() > 0) {
        return '<%= image_path("cards/backs_blue.png") %>'
      } else {
        return '<%= image_path("cards/Blank.png") %>'
      }
    }

    $scope.playerTurn = function() {
      return $scope.game.whosTurn();
    }


    $scope.cardSelect = function(card) {
      if ($scope.game.whosTurn() == $scope.game.players[0].name) {
        if ($scope.selectedCards($scope.cards).length < 4) {
          card.selected = true;
        }
      }
    }

    $scope.cancel = function() {
      $scope.cards.forEach(function (card) {
        card.selected = false;
      });
    }

    $scope.play = function() {
      console.log($scope.cards.length, $scope.get_player_name());
      if ($scope.game.whosTurn() == $scope.get_player_name()) {
        if ($scope.selectedCards($scope.cards).length > 0) {
          $scope.result = $scope.game.whosTurn() + " played " + $scope.game.playersTurn().hand.selectedCards().length + " " + $scope.game.currentRank() + "'s";
          var selectedCards = $scope.selectedCards($scope.cards)
          selectedCards.forEach(function (card) {
            var cards = $scope.cards;
            card.selected = false;
            cards.splice(cards.indexOf(card), 1);
            $scope.cards = cards;
          });
          $scope.game.discardPile.recieveNewCards($scope.game.currentRank(), selectedCards);
          $scope.game.changeCurrentRank();

          if ($scope.game.hasRobots()) {
            for (var i = 0; i < $scope.game.players.length; i++) {
              if ($scope.game.players[i].isRobot()) {
                if($scope.robotWaitForDoubts()) {
                  $scope.robotPressIDoubtIt(i);
                  break;
                }
              }
            }
            $scope.game.changeTurnOrder();
            $scope.loopCount = 1;
            $scope.robotLoop();
          } else {
            $scope.game.changeTurnOrder();
            $scope.checkWinCondition();
            console.log($scope.game.discardPile.isDiscardPure);
            $scope.updateDatabase();
            // send push notifier
            //  ...
          }
        }
      }
      console.log($scope.cards.length, $scope.get_player_name());
    }

    $scope.robotLoop = function() {
      $timeout(function() {
        $scope.robotTurn($scope.loopCount);
        $scope.checkWinCondition();
      }, 1000);

      $timeout(function() {
        $scope.game.changeTurnOrder();
        $scope.checkWinCondition();
      }, 5000);

      $timeout(function() {
        $scope.loopCount++;
        if ($scope.loopCount < $scope.game.players.length) {
         $scope.robotLoop();
        }
      }, 6000);
    }

    $scope.doubt = function() {
      if ($scope.result.indexOf("Won!") == -1) {
        // if($scope.game.whosTurn() != $scope.get_player_name()){
          if ($scope.game.discardPile.isDiscardPure) {
            $scope.result = "You called I doubt it and were wrong. You picked up the discard pile.";
            $scope.game.playerPosition($scope.get_player_name()).addCardsToHand($scope.game.discardPile.takeCards());
            $scope.cards = $scope.game.playerPosition($scope.get_player_name()).hand.cards;
          } else {
            $scope.result = "You called I doubt it and were Right. "+ $scope.game.previousPlayer().name +" picked up the discard pile.";
            $scope.game.previousPlayer().addCardsToHand($scope.game.discardPile.takeCards());
            $scope.cards = $scope.game.playerPosition($scope.get_player_name()).hand.cards;
          }
        // }
      }
      $scope.updateDatabase();
    }

    $scope.currentRank = function() {
      return $scope.game.currentRank();
    }

    $scope.results = function() {
      return $scope.result;
    }

    //All methods after this do not directly change the display. They change the game and the above methods update the view.

    $scope.checkWinCondition = function() {
      $scope.game.players.forEach(function(player) {
        if (player.handSize() <= 0) {
          if ($scope.result != player.name + " Won!") {
            $scope.result = player.name + " Won!";
            if (player.name == name) {
              $scope.increment_stats("wins");
            } else {
              $scope.increment_stats("losses");
            }
          }
        }
      });
    }

    $scope.robotTurn = function(robotIndex) {
      var randomIndex = 0;
      var description = '';
      var card = '';
      var cardsToPlay = new Array();
      for (var i = 0; i < 4; i++) {
        randomIndex = Math.floor(Math.random() * $scope.game.players[robotIndex].handSize());
        description = $scope.game.players[robotIndex].hand.cards[randomIndex].description();
        card = $scope.game.players[robotIndex].hand.takeCardByDescription(description);
        cardsToPlay.push(card);
      }
      $scope.game.discardPile.recieveNewCards($scope.game.currentRank, cardsToPlay);
      $scope.result = $scope.game.whosTurn() + " played " + cardsToPlay.length + " " + $scope.game.currentRank() + "'s";
      $scope.game.changeCurrentRank();
    }

    $scope.robotWaitForDoubts = function() {
      for (var i = 0; i < 20; i++) {
        var chance = Math.floor(Math.random() * 100);
        if(chance < 5) {
          return true;
        }
      }
    }

    $scope.robotPressIDoubtIt = function(robot) {
      if ($scope.game.discardPile.isDiscardPure) {
        $scope.result = $scope.game.players[robot].name + " called I doubt it and was wrong. He picked up the discard pile.";
        $scope.game.players[robot].addCardsToHand($scope.game.discardPile.takeCards());
      } else {
        $scope.result = $scope.game.players[robot].name + " called I doubt it and was Right. You picked up the discard pile.";
        $scope.game.playerPosition($scope.get_player_name()).addCardsToHand($scope.game.discardPile.takeCards());
      }
    }
  }
}];
